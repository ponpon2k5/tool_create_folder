import google.generativeai as genai
from PIL import Image
import os
import concurrent.futures
# import csv  # <-- ### ƒê√É B·ªé ### Kh√¥ng c·∫ßn d√πng th∆∞ vi·ªán n√†y n·ªØa
import time
import json
from tqdm import tqdm
from collections import Counter

# --- PH·∫¶N C·∫§U H√åNH ---
# Vui l√≤ng thay ƒë·ªïi c√°c gi√° tr·ªã d∆∞·ªõi ƒë√¢y cho ph√π h·ª£p

# 1. D√°n API Key c·ªßa b·∫°n v√†o ƒë√¢y
try:
    # --- QUAN TR·ªåNG: H√£y thay th·∫ø b·∫±ng API Key c·ªßa ch√≠nh b·∫°n ---
    GOOGLE_API_KEY = "AIzaSyAylYXbqPkbqBTGc7Spct9-EFQA0lguKaI"
    genai.configure(api_key=GOOGLE_API_KEY)
except AttributeError:
    print("L·ªói: Vui l√≤ng cung c·∫•p API Key c·ªßa b·∫°n trong bi·∫øn GOOGLE_API_KEY.")
    exit()

# 2. T√™n file CSV ƒë·ªÉ l∆∞u k·∫øt qu·∫£
# OUTPUT_CSV_FILE = "ket_qua_tong_hop.csv" # <-- ### ƒê√É B·ªé ###

# 3. S·ªë lu·ªìng x·ª≠ l√Ω song song. 10 l√† m·ªôt con s·ªë t·ªët ƒë·ªÉ b·∫Øt ƒë·∫ßu.
MAX_WORKERS = 5
# C√°c ƒë·ªãnh d·∫°ng file ·∫£nh h·ª£p l·ªá
IMAGE_EXTENSIONS = ('.png', '.jpg', '.jpeg', '.webp')

# --- H√ÄM X·ª¨ L√ù CHO M·ªñI LU·ªíNG ---

# Kh·ªüi t·∫°o model m·ªôt l·∫ßn duy nh·∫•t ƒë·ªÉ t√°i s·ª≠ d·ª•ng
model = genai.GenerativeModel('gemini-2.5-flash-lite')


# ƒê√¢y l√† prompt "t·ªïng" ƒë·ªÉ h·ªèi t·∫•t c·∫£ th√¥ng tin c√πng l√∫c
# v√† y√™u c·∫ßu tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng JSON.
MASTER_PROMPT = """
Ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† tr√≠ch xu·∫•t c√°c th√¥ng tin sau ƒë√¢y.
Tr·∫£ l·ªùi b·∫±ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON h·ª£p l·ªá duy nh·∫•t.
C√°c key c·ªßa JSON ph·∫£i l√†: "ma_niem_phong", "ma_tau", "ngay_chup", "ma_thiet_bi".

- "ma_niem_phong": T√¨m m√£ ni√™m phong, v√≠ d·ª• "SEAL A 123456", "K 678901", ho·∫∑c "Z012345". Ch·ªâ l·∫•y ph·∫ßn g·ªìm 1 k√Ω t·ª± ch·ªØ v√† 6 s·ªë, v√≠ d·ª• "A123456", "K678901", ho·∫∑c "Z012345". N·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".
- "ma_tau": T√¨m m√£ t√†u, v√≠ d·ª• "BT 97793 TS". Ch·ªâ l·∫•y ph·∫ßn "BT" v√† 5 s·ªë ti·∫øp theo, v√≠ d·ª• "BT97793". N·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".
- "ngay_chup": T√¨m ng√†y th√°ng tr√™n ·∫£nh, v√≠ d·ª• "05/08/2025". Chuy·ªÉn th√†nh ƒë·ªãnh d·∫°ng 6 s·ªë "DDMMYY", v√≠ d·ª• "050825". N·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".
- "ma_thiet_bi": T√¨m m√£ thi·∫øt b·ªã, th∆∞·ªùng b·∫Øt ƒë·∫ßu b·∫±ng BTK, v√≠ d·ª• "BTK123456". Ch·ªâ l·∫•y 6 s·ªë cu·ªëi, v√≠ d·ª• "123456". N·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".

Quan tr·ªçng: Ch·ªâ tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng JSON, kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n gi·∫£i th√≠ch n√†o kh√°c.
"""


def process_image_for_all_data(image_path: str) -> dict:
    """
    H√†m n√†y x·ª≠ l√Ω m·ªôt ·∫£nh duy nh·∫•t, g·ª≠i 1 prompt t·ªïng h·ª£p ƒë·∫øn API
    v√† parse k·∫øt qu·∫£ JSON tr·∫£ v·ªÅ.
    """
    file_name = os.path.basename(image_path)
    try:
        img = Image.open(image_path)
        response = model.generate_content([MASTER_PROMPT, img])
        cleaned_text = response.text.strip().replace("```json", "").replace("```", "")
        data = json.loads(cleaned_text)
        data['file_name'] = file_name
        return data
    except json.JSONDecodeError:
        return {"file_name": file_name, "error": "AI kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá", "raw_response": response.text}
    except FileNotFoundError:
        return {"file_name": file_name, "error": "Kh√¥ng t√¨m th·∫•y file."}
    except Image.UnidentifiedImageError:
        return {"file_name": file_name, "error": "File ·∫£nh b·ªã l·ªói ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc."}
    except Exception as e:
        return {"file_name": file_name, "error": f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"}


# --- CH·∫†Y CH∆Ø∆†NG TR√åNH CH√çNH ---
if __name__ == "__main__":

    while True:
        image_folder_path = input("Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a ·∫£nh v√† nh·∫•n Enter:\n"
                                  "(V√≠ d·ª•: C:\\Users\\TenBan\\Pictures\\Seals ho·∫∑c /home/TenBan/seals_test)\n> ")
        if os.path.isdir(image_folder_path):
            break
        else:
            print("\n‚ùå L·ªói: ƒê∆∞·ªùng d·∫´n kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ph·∫£i l√† m·ªôt th∆∞ m·ª•c. Vui l√≤ng th·ª≠ l·∫°i.\n")

    total_start_time = time.perf_counter()

    # 1. T√¨m t·∫•t c·∫£ c√°c file ·∫£nh
    print(f"\nüîç ƒêang qu√©t ·∫£nh trong th∆∞ m·ª•c: '{image_folder_path}'...")
    image_paths = []
    for root, _, files in os.walk(image_folder_path):
        for file in files:
            if file.lower().endswith(IMAGE_EXTENSIONS):
                image_paths.append(os.path.join(root, file))

    if not image_paths:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c '{image_folder_path}'.")
        exit()

    num_images = len(image_paths)
    print(f"‚úÖ T√¨m th·∫•y {num_images} ·∫£nh. B·∫Øt ƒë·∫ßu x·ª≠ l√Ω v·ªõi {MAX_WORKERS} lu·ªìng...")

    # 2. X·ª≠ l√Ω song song
    all_results = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        results_iterator = executor.map(process_image_for_all_data, image_paths)
        all_results = list(tqdm(results_iterator, total=num_images, desc="ü§ñ ƒêang x·ª≠ l√Ω ·∫£nh"))


    # 4. Ph√¢n t√≠ch v√† t·ªïng h·ª£p k·∫øt qu·∫£ cu·ªëi c√πng
    print("\nüìà ƒêang t·ªïng h·ª£p k·∫øt qu·∫£...")

    # Kh·ªüi t·∫°o c√°c b·ªô ƒë·∫øm
    niem_phong_counts = Counter()
    tau_counts = Counter()
    ngay_chup_counts = Counter()
    ma_thiet_bi_counts = Counter()
    error_count = 0

    # Duy·ªát qua t·∫•t c·∫£ k·∫øt qu·∫£ ƒë·ªÉ ƒë·∫øm
    for result in all_results:
        if 'error' in result and result['error']:
            error_count += 1
            continue # B·ªè qua c√°c k·∫øt qu·∫£ l·ªói v√† ƒëi ti·∫øp

        ma_niem_phong = result.get('ma_niem_phong', '').strip()
        ma_tau = result.get('ma_tau', '').strip()
        ngay_chup = result.get('ngay_chup', '').strip()
        ma_thiet_bi = result.get('ma_thiet_bi', '').strip()

        if ma_niem_phong and ma_niem_phong.lower() != 'kh√¥ng t√¨m th·∫•y':
            niem_phong_counts[ma_niem_phong] += 1

        if ma_tau and ma_tau.lower() != 'kh√¥ng t√¨m th·∫•y':
            tau_counts[ma_tau] += 1

        if ngay_chup and ngay_chup.lower() != 'kh√¥ng t√¨m th·∫•y':
            ngay_chup_counts[ngay_chup] += 1

        if ma_thiet_bi and ma_thiet_bi.lower() != 'kh√¥ng t√¨m th·∫•y':
            ma_thiet_bi_counts[ma_thiet_bi] += 1

    # T√¨m gi√° tr·ªã xu·∫•t hi·ªán nhi·ªÅu nh·∫•t t·ª´ m·ªói b·ªô ƒë·∫øm
    final_niem_phong = niem_phong_counts.most_common(1)[0][0] if niem_phong_counts else "Kh√¥ng c√≥ d·ªØ li·ªáu"
    final_tau = tau_counts.most_common(1)[0][0] if tau_counts else "Kh√¥ng c√≥ d·ªØ li·ªáu"
    final_ngay_chup = ngay_chup_counts.most_common(1)[0][0] if ngay_chup_counts else "Kh√¥ng c√≥ d·ªØ li·ªáu"
    final_thiet_bi = ma_thiet_bi_counts.most_common(1)[0][0] if ma_thiet_bi_counts else "Kh√¥ng c√≥ d·ªØ li·ªáu"

    total_end_time = time.perf_counter()
    total_duration = total_end_time - total_start_time

    # --- ### THAY ƒê·ªîI ### In ra k·∫øt qu·∫£ cu·ªëi c√πng ---
    print("\n" + "="*50)
    print("‚ú® HO√ÄN T·∫§T! ‚ú®")
    print("-" * 50)
    print("üìã K·∫æT QU·∫¢ T·ªîNG H·ª¢P (D·ª±a tr√™n t·∫ßn su·∫•t cao nh·∫•t)")
    print(f"  - M√£ ni√™m phong ph·ªï bi·∫øn nh·∫•t: {final_niem_phong}")
    print(f"  - M√£ t√†u ph·ªï bi·∫øn nh·∫•t:        {final_tau}")
    print(f"  - Ng√†y ch·ª•p ph·ªï bi·∫øn nh·∫•t:     {final_ngay_chup}")
    print(f"  - M√£ thi·∫øt b·ªã ph·ªï bi·∫øn nh·∫•t:   {final_thiet_bi}")
    print("-" * 50)
    print(f"T·ªïng s·ªë ·∫£nh ƒë√£ x·ª≠ l√Ω: {num_images}")
    if error_count > 0:
        print(f"S·ªë ·∫£nh x·ª≠ l√Ω th√†nh c√¥ng: {num_images - error_count}")
        print(f"S·ªë ·∫£nh b·ªã l·ªói: {error_count}")
    print(f"T·ªïng th·ªùi gian th·ª±c thi: {total_duration:.2f} gi√¢y")
    print("=" * 50)