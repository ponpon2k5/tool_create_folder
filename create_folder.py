
import tkinter as tk
from tkcalendar import Calendar, DateEntry
from ttkwidgets.autocomplete import AutocompleteCombobox, AutocompleteEntry  # Import AutocompleteEntry
from tkinter import scrolledtext, filedialog, messagebox
import os
import shutil
import google.generativeai as genai
import json
import threading
from collections import Counter
from PIL import Image
import subprocess
import sys
import time
import math
from concurrent.futures import ThreadPoolExecutor, as_completed


CONFIG_FILE = "folder_path_config.txt"
INPUT_FOLDER_CONFIG = "input_folder_config.txt"
OUTPUT_FOLDER_CONFIG = "output_folder_config.txt"

# C·∫•u h√¨nh rate limit cho Gemini API
GEMINI_RPM_LIMIT = 15  # Requests per minute
BATCH_DELAY = 1.5  # Delay gi·ªØa c√°c batch (gi√¢y) - t·ªëi ∆∞u h√≥a ƒë·ªÉ nhanh h∆°n
CONCURRENT_REQUESTS = 3  # S·ªë request ƒë·ªìng th·ªùi trong m·ªói batch
MIN_DELAY = 0.5  # Delay t·ªëi thi·ªÉu gi·ªØa c√°c request trong batch
IMAGES_PER_REQUEST = 5  # S·ªë ·∫£nh g·ª≠i trong m·ªôt request (t·ªëi ∆∞u ƒë·ªÉ tr√°nh rate limit)

def calculate_batch_config(total_images):
    """T√≠nh to√°n c·∫•u h√¨nh batch d·ª±a tr√™n t·ªïng s·ªë ·∫£nh v·ªõi multi-image requests"""
    # T√≠nh s·ªë request c·∫ßn thi·∫øt v·ªõi multi-image
    num_requests = math.ceil(total_images / IMAGES_PER_REQUEST)
    
    if num_requests <= GEMINI_RPM_LIMIT:
        # N·∫øu s·ªë request <= 15, x·ª≠ l√Ω t·∫•t c·∫£ trong 1 batch
        batch_size = num_requests
        num_batches = 1
        # V·ªõi multi-image: th·ªùi gian = s·ªë request / s·ªë concurrent * 1.5s (l√¢u h∆°n v√¨ nhi·ªÅu ·∫£nh)
        estimated_time = (num_requests / CONCURRENT_REQUESTS) * 1.5
    else:
        # N·∫øu nhi·ªÅu h∆°n 15 requests, chia th√†nh nhi·ªÅu batch
        batch_size = GEMINI_RPM_LIMIT
        num_batches = math.ceil(num_requests / batch_size)
        # ∆Ø·ªõc t√≠nh th·ªùi gian: (s·ªë batch - 1) * delay + (s·ªë request / concurrent) * 1.5s
        estimated_time = (num_batches - 1) * BATCH_DELAY + (num_requests / CONCURRENT_REQUESTS) * 1.5
    
    return {
        'batch_size': batch_size,
        'num_batches': num_batches,
        'estimated_time': estimated_time,
        'concurrent_requests': CONCURRENT_REQUESTS,
        'images_per_request': IMAGES_PER_REQUEST,
        'total_requests': num_requests
    }

# C·∫•u h√¨nh Google Gemini AI
def load_api_config():
    """Load c·∫•u h√¨nh API t·ª´ file JSON ho·∫∑c b√°o l·ªói"""
    try:
        with open("api_config.json", "r", encoding="utf-8") as f:
            config = json.load(f)
            api_key = config.get("api_key", "")
            model = config.get("model", "gemini-2.5-flash-lite")
            
            if not api_key:
                print("‚ùå L·ªói: Ch∆∞a c·∫•u h√¨nh API Key!")
                print("üí° H∆∞·ªõng d·∫´n: Ch·∫°y config_manager.py ƒë·ªÉ c·∫•u h√¨nh API Key")
                return None, None
            
            return api_key, model
    except FileNotFoundError:
        print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file api_config.json!")
        print("üí° H∆∞·ªõng d·∫´n: Ch·∫°y config_manager.py ƒë·ªÉ t·∫°o file c·∫•u h√¨nh API")
        return None, None

GOOGLE_API_KEY, MODEL_NAME = load_api_config()
if GOOGLE_API_KEY and MODEL_NAME:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        model = genai.GenerativeModel(MODEL_NAME)
        AI_AVAILABLE = True
        print("‚úÖ AI ƒë√£ s·∫µn s√†ng!")
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o AI: {e}")
        AI_AVAILABLE = False
else:
    AI_AVAILABLE = False
    print("‚ùå AI kh√¥ng kh·∫£ d·ª•ng - C·∫ßn c·∫•u h√¨nh API Key")




def save_input_folder_path(path):
    with open(INPUT_FOLDER_CONFIG, "w") as f:
        f.write(path)

def save_output_folder_path(path):
    with open(OUTPUT_FOLDER_CONFIG, "w") as f:
        f.write(path)

def load_input_folder_path():
    try:
        with open(INPUT_FOLDER_CONFIG, "r") as f:
            return f.read().strip()
    except FileNotFoundError:
        return ""

def load_output_folder_path():
    try:
        with open(OUTPUT_FOLDER_CONFIG, "r") as f:
            return f.read().strip()
    except FileNotFoundError:
        return ""

def browse_input_folder():
    folder_path = filedialog.askdirectory(title="Ch·ªçn folder input")
    if folder_path:
        input_folder_entry.delete(0, tk.END)
        input_folder_entry.insert(0, folder_path)
        save_input_folder_path(folder_path)

def browse_output_folder():
    folder_path = filedialog.askdirectory(title="Ch·ªçn folder output")
    if folder_path:
        output_folder_entry.delete(0, tk.END)
        output_folder_entry.insert(0, folder_path)
        save_output_folder_path(folder_path)

# T·∫°o mapping t·ª´ m√£ t·ªânh sang t√™n t·ªânh
def create_tinh_mapping():
    """T·∫°o mapping t·ª´ m√£ t·ªânh sang t√™n t·ªânh t·ª´ file config"""
    mapping = {}
    try:
        with open("ma_tinh_config.txt", "r", encoding="utf-8") as f:
            for line in f:
                if ":" in line:
                    tinh_name, tinh_code = line.strip().split(":")
                    mapping[tinh_code.strip()] = tinh_name.strip()
    except FileNotFoundError:
        print("Kh√¥ng t√¨m th·∫•y file ma_tinh_config.txt")
    return mapping

# T·∫°o prompt v·ªõi th√¥ng tin mapping t·ªânh
def create_master_prompt():
    """T·∫°o prompt v·ªõi th√¥ng tin mapping t·ªânh"""
    tinh_mapping = create_tinh_mapping()
    
    # T·∫°o danh s√°ch mapping r√µ r√†ng h∆°n
    mapping_list = []
    for code, name in tinh_mapping.items():
        mapping_list.append(f"{code} = {name}")
    
    mapping_text = "\n".join(mapping_list)
    
    return f"""
Ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† tr√≠ch xu·∫•t c√°c th√¥ng tin sau ƒë√¢y.
Tr·∫£ l·ªùi b·∫±ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON h·ª£p l·ªá duy nh·∫•t.
C√°c key c·ªßa JSON ph·∫£i l√†: "ma_niem_phong", "ma_tau_full", "ngay_chup", "ma_thiet_bi_full".

- "ma_niem_phong": T√¨m m√£ ni√™m phong, v√≠ d·ª• "SEAL A 123456", "K 678901", ho·∫∑c "Z012345". Ch·ªâ l·∫•y ph·∫ßn g·ªìm 1 k√Ω t·ª± ch·ªØ v√† 6 s·ªë, v√≠ d·ª• "A123456", "K678901", ho·∫∑c "Z012345". N·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".
- "ma_tau_full": T√¨m m√£ t√†u ƒë·∫ßy ƒë·ªß (c√≥ c·∫£ ch·ªØ c√°i v√† s·ªë), v√≠ d·ª• "KG 95596", "BT 97793", "SG 12345", "Bƒê 12345", "ƒêNa 67890", "TTH 11111". Gi·ªØ nguy√™n format ƒë·∫ßy ƒë·ªß v·ªõi kho·∫£ng tr·∫Øng. QUAN TR·ªåNG: T·ªïng h·ª£p to√†n b·ªô m√£ t√†u bao g·ªìm c·∫£ m√£ t·ªânh v√† s·ªë t√†u th√†nh m·ªôt chu·ªói duy nh·∫•t. N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".
- "ngay_chup": T√¨m ng√†y th√°ng tr√™n ·∫£nh, v√≠ d·ª• "05/08/2025". Chuy·ªÉn th√†nh ƒë·ªãnh d·∫°ng 6 s·ªë "DDMMYY", v√≠ d·ª• "050825". N·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".
- "ma_thiet_bi_full": T√¨m m√£ thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß, B·∫ÆT BU·ªòC b·∫Øt ƒë·∫ßu b·∫±ng BTK, v√≠ d·ª• "BTK123456", "BTK009533", "BTK000123". Gi·ªØ nguy√™n format ƒë·∫ßy ƒë·ªß bao g·ªìm c·∫£ ch·ªØ c√°i v√† s·ªë. QUAN TR·ªåNG: T·ªïng h·ª£p to√†n b·ªô m√£ thi·∫øt b·ªã bao g·ªìm c·∫£ ph·∫ßn ch·ªØ c√°i (BTK) v√† ph·∫ßn s·ªë th√†nh m·ªôt chu·ªói duy nh·∫•t. CH·ªà CH·∫§P NH·∫¨N m√£ b·∫Øt ƒë·∫ßu b·∫±ng BTK, kh√¥ng ch·∫•p nh·∫≠n BOX, DEV, ho·∫∑c c√°c m√£ kh√°c. N·∫øu kh√¥ng t√¨m th·∫•y m√£ BTK, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".

V√≠ d·ª•: 
- M√£ thi·∫øt b·ªã: "BTK123456" ‚Üí tr·∫£ v·ªÅ "BTK123456" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)
- M√£ thi·∫øt b·ªã: "BTK009533" ‚Üí tr·∫£ v·ªÅ "BTK009533" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)
- M√£ thi·∫øt b·ªã: "BTK000123" ‚Üí tr·∫£ v·ªÅ "BTK000123" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)
- M√£ thi·∫øt b·ªã: "BOX001907" ‚Üí tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y" (kh√¥ng ph·∫£i BTK)
- M√£ t√†u: "KG 95596" ‚Üí tr·∫£ v·ªÅ "KG 95596" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)
- M√£ t√†u: "Bƒê 12345" ‚Üí tr·∫£ v·ªÅ "Bƒê 12345" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)
- M√£ t√†u: "ƒêNa 67890" ‚Üí tr·∫£ v·ªÅ "ƒêNa 67890" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)

QUAN TR·ªåNG: 
1. T·ªïng h·ª£p m√£ t√†u ƒë·∫ßy ƒë·ªß tr∆∞·ªõc (bao g·ªìm c·∫£ m√£ t·ªânh v√† s·ªë t√†u)
2. T·ªïng h·ª£p m√£ thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß tr∆∞·ªõc (bao g·ªìm c·∫£ BTK v√† s·ªë)
3. Gi·ªØ nguy√™n format g·ªëc c·ªßa m√£ t√†u v√† m√£ thi·∫øt b·ªã
4. Kh√¥ng t√°ch ri√™ng c√°c ph·∫ßn trong JSON response
5. Vi·ªác t√°ch c√°c ph·∫ßn s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω sau

N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".

Quan tr·ªçng: Ch·ªâ tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng JSON, kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n gi·∫£i th√≠ch n√†o kh√°c.
"""

def create_multi_image_prompt():
    """T·∫°o prompt cho x·ª≠ l√Ω nhi·ªÅu ·∫£nh trong m·ªôt request"""
    tinh_mapping = create_tinh_mapping()
    
    # T·∫°o danh s√°ch mapping r√µ r√†ng h∆°n
    mapping_list = []
    for code, name in tinh_mapping.items():
        mapping_list.append(f"{code} = {name}")
    
    mapping_text = "\n".join(mapping_list)
    
    return f"""
Ph√¢n t√≠ch c√°c h√¨nh ·∫£nh n√†y v√† tr√≠ch xu·∫•t th√¥ng tin t·ª´ m·ªói ·∫£nh.
Tr·∫£ l·ªùi b·∫±ng m·ªôt m·∫£ng JSON h·ª£p l·ªá, m·ªói ph·∫ßn t·ª≠ l√† k·∫øt qu·∫£ c·ªßa m·ªôt ·∫£nh.

M·ªói ph·∫ßn t·ª≠ trong m·∫£ng ph·∫£i c√≥ c√°c key: "ma_niem_phong", "ma_tau_full", "ngay_chup", "ma_thiet_bi_full".

- "ma_niem_phong": T√¨m m√£ ni√™m phong, v√≠ d·ª• "SEAL A 123456", "K 678901", ho·∫∑c "Z012345". Ch·ªâ l·∫•y ph·∫ßn g·ªìm 1 k√Ω t·ª± ch·ªØ v√† 6 s·ªë, v√≠ d·ª• "A123456", "K678901", ho·∫∑c "Z012345". N·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".
- "ma_tau_full": T√¨m m√£ t√†u ƒë·∫ßy ƒë·ªß (c√≥ c·∫£ ch·ªØ c√°i v√† s·ªë), v√≠ d·ª• "KG 95596", "BT 97793", "SG 12345", "Bƒê 12345", "ƒêNa 67890", "TTH 11111". Gi·ªØ nguy√™n format ƒë·∫ßy ƒë·ªß v·ªõi kho·∫£ng tr·∫Øng. QUAN TR·ªåNG: T·ªïng h·ª£p to√†n b·ªô m√£ t√†u bao g·ªìm c·∫£ m√£ t·ªânh v√† s·ªë t√†u th√†nh m·ªôt chu·ªói duy nh·∫•t. N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".
- "ngay_chup": T√¨m ng√†y th√°ng tr√™n ·∫£nh, v√≠ d·ª• "05/08/2025". Chuy·ªÉn th√†nh ƒë·ªãnh d·∫°ng 6 s·ªë "DDMMYY", v√≠ d·ª• "050825". N·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".
- "ma_thiet_bi_full": T√¨m m√£ thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß, B·∫ÆT BU·ªòC b·∫Øt ƒë·∫ßu b·∫±ng BTK, v√≠ d·ª• "BTK123456", "BTK009533", "BTK000123". Gi·ªØ nguy√™n format ƒë·∫ßy ƒë·ªß bao g·ªìm c·∫£ ch·ªØ c√°i v√† s·ªë. QUAN TR·ªåNG: T·ªïng h·ª£p to√†n b·ªô m√£ thi·∫øt b·ªã bao g·ªìm c·∫£ ph·∫ßn ch·ªØ c√°i (BTK) v√† ph·∫ßn s·ªë th√†nh m·ªôt chu·ªói duy nh·∫•t. CH·ªà CH·∫§P NH·∫¨N m√£ b·∫Øt ƒë·∫ßu b·∫±ng BTK, kh√¥ng ch·∫•p nh·∫≠n BOX, DEV, ho·∫∑c c√°c m√£ kh√°c. N·∫øu kh√¥ng t√¨m th·∫•y m√£ BTK, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".

V√≠ d·ª•: 
- M√£ thi·∫øt b·ªã: "BTK123456" ‚Üí tr·∫£ v·ªÅ "BTK123456" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)
- M√£ thi·∫øt b·ªã: "BTK009533" ‚Üí tr·∫£ v·ªÅ "BTK009533" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)
- M√£ thi·∫øt b·ªã: "BTK000123" ‚Üí tr·∫£ v·ªÅ "BTK000123" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)
- M√£ thi·∫øt b·ªã: "BOX001907" ‚Üí tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y" (kh√¥ng ph·∫£i BTK)
- M√£ t√†u: "KG 95596" ‚Üí tr·∫£ v·ªÅ "KG 95596" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)
- M√£ t√†u: "Bƒê 12345" ‚Üí tr·∫£ v·ªÅ "Bƒê 12345" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)
- M√£ t√†u: "ƒêNa 67890" ‚Üí tr·∫£ v·ªÅ "ƒêNa 67890" (t·ªïng h·ª£p ƒë·∫ßy ƒë·ªß)

QUAN TR·ªåNG: 
1. Ph√¢n t√≠ch t·ª´ng ·∫£nh ri√™ng bi·ªát
2. Tr·∫£ v·ªÅ m·∫£ng JSON v·ªõi s·ªë ph·∫ßn t·ª≠ b·∫±ng s·ªë ·∫£nh
3. T·ªïng h·ª£p m√£ t√†u ƒë·∫ßy ƒë·ªß tr∆∞·ªõc (bao g·ªìm c·∫£ m√£ t·ªânh v√† s·ªë t√†u)
4. T·ªïng h·ª£p m√£ thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß tr∆∞·ªõc (bao g·ªìm c·∫£ BTK v√† s·ªë)
5. Gi·ªØ nguy√™n format g·ªëc c·ªßa m√£ t√†u v√† m√£ thi·∫øt b·ªã
6. Kh√¥ng t√°ch ri√™ng c√°c ph·∫ßn trong JSON response
7. Vi·ªác t√°ch c√°c ph·∫ßn s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω sau

N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c, tr·∫£ v·ªÅ "Kh√¥ng t√¨m th·∫•y".

Quan tr·ªçng: Ch·ªâ tr·∫£ v·ªÅ m·∫£ng JSON, kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n gi·∫£i th√≠ch n√†o kh√°c.
"""

def process_image_with_ai(image_path):
    """Ph√¢n t√≠ch m·ªôt ·∫£nh b·∫±ng AI v√† tr·∫£ v·ªÅ th√¥ng tin"""
    try:
        img = Image.open(image_path)
        # T·∫°o prompt m·ªõi m·ªói l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ th√¥ng tin mapping m·ªõi nh·∫•t
        current_prompt = create_master_prompt()
        response = model.generate_content([current_prompt, img])
        cleaned_text = response.text.strip().replace("```json", "").replace("```", "")
        data = json.loads(cleaned_text)
        # L∆∞u raw response ƒë·ªÉ debug
        data['raw_response'] = response.text
        return data
    except json.JSONDecodeError:
        return {"error": "AI kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá", "raw_response": response.text}
    except Exception as e:
        return {"error": f"L·ªói: {e}"}

def process_multiple_images_with_ai(image_paths):
    """Ph√¢n t√≠ch nhi·ªÅu ·∫£nh trong m·ªôt request v√† tr·∫£ v·ªÅ danh s√°ch k·∫øt qu·∫£"""
    try:
        # M·ªü t·∫•t c·∫£ ·∫£nh
        images = []
        for image_path in image_paths:
            img = Image.open(image_path)
            images.append(img)
        
        # T·∫°o prompt cho multi-image
        current_prompt = create_multi_image_prompt()
        
        # G·ª≠i t·∫•t c·∫£ ·∫£nh trong m·ªôt request
        response = model.generate_content([current_prompt] + images)
        cleaned_text = response.text.strip().replace("```json", "").replace("```", "")
        data = json.loads(cleaned_text)
        
        # ƒê·∫£m b·∫£o data l√† m·ªôt m·∫£ng
        if not isinstance(data, list):
            data = [data]
        
        # Th√™m th√¥ng tin file name cho m·ªói k·∫øt qu·∫£
        results = []
        for i, result in enumerate(data):
            if i < len(image_paths):
                result['file_name'] = os.path.basename(image_paths[i])
                result['raw_response'] = response.text
                results.append(result)
        
        return results
    except json.JSONDecodeError:
        # N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, t·∫°o k·∫øt qu·∫£ l·ªói cho t·∫•t c·∫£ ·∫£nh
        error_results = []
        for image_path in image_paths:
            error_results.append({
                "error": "AI kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá", 
                "raw_response": response.text,
                "file_name": os.path.basename(image_path)
            })
        return error_results
    except Exception as e:
        # N·∫øu c√≥ l·ªói kh√°c, t·∫°o k·∫øt qu·∫£ l·ªói cho t·∫•t c·∫£ ·∫£nh
        error_results = []
        for image_path in image_paths:
            error_results.append({
                "error": f"L·ªói: {e}",
                "file_name": os.path.basename(image_path)
            })
        return error_results

def process_batch_multi_image(batch_images, batch_num, total_batches, total_images):
    """X·ª≠ l√Ω m·ªôt batch ·∫£nh v·ªõi multi-image requests"""
    batch_results = []
    request_times = []  # L∆∞u th·ªùi gian x·ª≠ l√Ω c√°c request
    
    def process_image_group(image_group_info):
        image_paths, start_idx = image_group_info
        start_time = time.time()
        
        print(f"üîÑ ƒêang x·ª≠ l√Ω nh√≥m ·∫£nh {start_idx + 1}-{start_idx + len(image_paths)}/{total_images} ({len(image_paths)} ·∫£nh)")
        
        # C·∫≠p nh·∫≠t UI progress
        def update_progress():
            label_result.config(text=f"ƒêang ph√¢n t√≠ch nh√≥m ·∫£nh {start_idx + 1}-{start_idx + len(image_paths)}/{total_images}...\nBatch {batch_num + 1}/{total_batches}")
        window.after(0, update_progress)
        
        # X·ª≠ l√Ω nhi·ªÅu ·∫£nh trong m·ªôt request
        results = process_multiple_images_with_ai(image_paths)
        
        end_time = time.time()
        request_time = end_time - start_time
        request_times.append(request_time)
        
        print(f"‚úÖ Ho√†n th√†nh nh√≥m ·∫£nh {start_idx + 1}-{start_idx + len(image_paths)}/{total_images} (took {request_time:.2f}s)")
        return results
    
    # Chia ·∫£nh th√†nh c√°c nh√≥m
    image_groups = []
    start_idx = batch_num * GEMINI_RPM_LIMIT
    for i in range(0, len(batch_images), IMAGES_PER_REQUEST):
        group_images = batch_images[i:i + IMAGES_PER_REQUEST]
        group_start_idx = start_idx + i
        image_groups.append((group_images, group_start_idx))
    
    print(f"üì¶ Chia batch th√†nh {len(image_groups)} nh√≥m, m·ªói nh√≥m t·ªëi ƒëa {IMAGES_PER_REQUEST} ·∫£nh")
    
    # X·ª≠ l√Ω concurrent v·ªõi ThreadPoolExecutor
    with ThreadPoolExecutor(max_workers=CONCURRENT_REQUESTS) as executor:
        # Submit t·∫•t c·∫£ tasks
        future_to_group = {executor.submit(process_image_group, group_info): group_info 
                          for group_info in image_groups}
        
        # Thu th·∫≠p k·∫øt qu·∫£ khi ho√†n th√†nh
        for future in as_completed(future_to_group):
            try:
                results = future.result()
                batch_results.extend(results)  # Extend v√¨ results l√† m·ªôt list
            except Exception as e:
                group_info = future_to_group[future]
                # T·∫°o k·∫øt qu·∫£ l·ªói cho t·∫•t c·∫£ ·∫£nh trong nh√≥m
                for image_path in group_info[0]:
                    error_result = {"error": f"L·ªói x·ª≠ l√Ω nh√≥m ·∫£nh: {e}", "file_name": os.path.basename(image_path)}
                    batch_results.append(error_result)
    
    # T√≠nh to√°n th·ªëng k√™ th·ªùi gian
    if request_times:
        avg_time = sum(request_times) / len(request_times)
        total_images_processed = len(batch_results)
        print(f"üìä Th·ªëng k√™ batch {batch_num + 1}: {len(request_times)} requests, trung b√¨nh {avg_time:.2f}s/request, {total_images_processed} ·∫£nh")
    
    return batch_results

def analyze_images_with_ai():
    """Ph√¢n t√≠ch t·∫•t c·∫£ ·∫£nh trong folder input b·∫±ng AI"""
    if not AI_AVAILABLE:
        messagebox.showerror("L·ªói", "‚ùå AI kh√¥ng kh·∫£ d·ª•ng!\n\nüí° C·∫ßn c·∫•u h√¨nh API Key:\n1. Ch·∫°y config_manager.py\n2. V√†o tab 'API Gemini'\n3. Nh·∫≠p API Key v√† nh·∫•n 'L∆∞u'")
        return
    
    input_path = input_folder_entry.get().strip()
    if not input_path or not os.path.isdir(input_path):
        messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn folder input ch·ª©a ·∫£nh ƒë·ªÉ ph√¢n t√≠ch.")
        return
    
    # T√¨m t·∫•t c·∫£ ·∫£nh trong folder input
    image_extensions = ('.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp')
    image_paths = []
    
    for root, _, files in os.walk(input_path):
        for file in files:
            if file.lower().endswith(image_extensions):
                image_paths.append(os.path.join(root, file))
    
    if not image_paths:
        messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong folder input.")
        return
    
    # T√≠nh to√°n c·∫•u h√¨nh batch
    batch_config = calculate_batch_config(len(image_paths))
    
    # Hi·ªÉn th·ªã loading v·ªõi th√¥ng tin batch
    if batch_config['num_batches'] > 1:
        label_result.config(text=f"ƒêang ph√¢n t√≠ch {len(image_paths)} ·∫£nh b·∫±ng AI...\nChia th√†nh {batch_config['num_batches']} batch, {batch_config['concurrent_requests']} concurrent\n{batch_config['images_per_request']} ·∫£nh/request (∆∞·ªõc t√≠nh {batch_config['estimated_time']:.1f}s)")
    else:
        label_result.config(text=f"ƒêang ph√¢n t√≠ch {len(image_paths)} ·∫£nh b·∫±ng AI...\n{batch_config['concurrent_requests']} concurrent, {batch_config['images_per_request']} ·∫£nh/request")
    button_analyze.config(state="disabled")
    window.update()
    
    # Th√¥ng b√°o b·∫Øt ƒë·∫ßu ph√¢n t√≠ch
    print(f"\nüöÄ B·∫ÆT ƒê·∫¶U PH√ÇN T√çCH {len(image_paths)} ·∫¢NH B·∫∞NG AI...")
    print(f"üìÅ Folder: {input_path}")
    print(f"üìä C·∫•u h√¨nh batch: {batch_config['num_batches']} batch, m·ªói batch t·ªëi ƒëa {batch_config['batch_size']} requests")
    print(f"üñºÔ∏è  Multi-image processing: {batch_config['images_per_request']} ·∫£nh/request")
    print(f"‚ö° Concurrent processing: {batch_config['concurrent_requests']} requests ƒë·ªìng th·ªùi")
    print(f"üìà T·ªïng s·ªë requests: {batch_config['total_requests']} (gi·∫£m {len(image_paths) - batch_config['total_requests']} requests)")
    print(f"‚è±Ô∏è  Th·ªùi gian ∆∞·ªõc t√≠nh: {batch_config['estimated_time']:.1f} gi√¢y")
    print("-" * 60)
    
    def analyze_thread():
        try:
            all_results = []
            batch_size = batch_config['batch_size']
            num_batches = batch_config['num_batches']
            
            for batch_num in range(num_batches):
                start_idx = batch_num * batch_size
                end_idx = min(start_idx + batch_size, len(image_paths))
                batch_images = image_paths[start_idx:end_idx]
                
                print(f"\nüì¶ BATCH {batch_num + 1}/{num_batches}: X·ª≠ l√Ω ·∫£nh {start_idx + 1}-{end_idx}")
                print(f"üñºÔ∏è  S·ªë ·∫£nh trong batch: {len(batch_images)}")
                print(f"‚ö° Multi-image processing: {IMAGES_PER_REQUEST} ·∫£nh/request")
                print(f"üîÑ Concurrent processing: {CONCURRENT_REQUESTS} requests ƒë·ªìng th·ªùi")
                
                # X·ª≠ l√Ω batch v·ªõi multi-image processing
                batch_results = process_batch_multi_image(batch_images, batch_num, num_batches, len(image_paths))
                all_results.extend(batch_results)
                
                print(f"‚úÖ Ho√†n th√†nh batch {batch_num + 1}/{num_batches}")
                
                # Delay gi·ªØa c√°c batch (tr·ª´ batch cu·ªëi)
                if batch_num < num_batches - 1:
                    print(f"‚è≥ Ch·ªù {BATCH_DELAY}s tr∆∞·ªõc khi x·ª≠ l√Ω batch ti·∫øp theo...")
                    # C·∫≠p nh·∫≠t UI v·ªõi th√¥ng b√°o delay
                    def update_delay():
                        label_result.config(text=f"Ho√†n th√†nh batch {batch_num + 1}/{num_batches}\nCh·ªù {BATCH_DELAY}s tr∆∞·ªõc batch ti·∫øp theo...")
                    window.after(0, update_delay)
                    time.sleep(BATCH_DELAY)
            
            print(f"\nüéâ HO√ÄN T·∫§T PH√ÇN T√çCH {len(image_paths)} ·∫¢NH!")
            print("-" * 60)
            
            # Ph√¢n t√≠ch k·∫øt qu·∫£
            niem_phong_counts = Counter()
            tau_counts = Counter()
            ngay_chup_counts = Counter()
            ma_thiet_bi_counts = Counter()
            tinh_counts = Counter()
            error_count = 0
            
            for result in all_results:
                if 'error' in result and result['error']:
                    error_count += 1
                    continue
                
                ma_niem_phong = result.get('ma_niem_phong', '').strip()
                ma_tau_full = result.get('ma_tau_full', '').strip()  # M√£ t√†u ƒë·∫ßy ƒë·ªß t·ª´ AI
                ngay_chup = result.get('ngay_chup', '').strip()
                ma_thiet_bi_full = result.get('ma_thiet_bi_full', '').strip()  # M√£ thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß t·ª´ AI
                
                # T·ª± ƒë·ªông suy ra t·ªânh t·ª´ m√£ t√†u ƒë·∫ßy ƒë·ªß
                tinh = "Kh√¥ng t√¨m th·∫•y"
                ma_tau_so = "Kh√¥ng t√¨m th·∫•y"
                
                if ma_tau_full and ma_tau_full.lower() != 'kh√¥ng t√¨m th·∫•y':
                    # T√°ch m√£ t√†u ƒë·∫ßy ƒë·ªß th√†nh ch·ªØ c√°i v√† s·ªë
                    import re
                    ma_tau_pattern = r'([A-Za-z]{2,3})[-\s]*(\d{5})'
                    ma_tau_match = re.search(ma_tau_pattern, ma_tau_full)
                    
                    if ma_tau_match:
                        tinh_code = ma_tau_match.group(1).upper()  # Ch·ªØ c√°i t·ªânh, chuy·ªÉn th√†nh uppercase
                        ma_tau_so = ma_tau_match.group(2)  # S·ªë t√†u
                        
                        # T√¨m t·ªânh t·ª´ mapping (so s√°nh kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
                        tinh_mapping = create_tinh_mapping()
                        for code, name in tinh_mapping.items():
                            if code.upper() == tinh_code:
                                tinh = name
                                break
                        
                        # L∆∞u th√¥ng tin v√†o result ƒë·ªÉ debug
                        result['tinh_code'] = tinh_code
                        result['tinh_code_original'] = ma_tau_match.group(1)  # L∆∞u m√£ g·ªëc ƒë·ªÉ debug
                        result['ma_tau_so'] = ma_tau_so
                        result['tinh'] = tinh
                        result['ma_tau'] = ma_tau_full  # L∆∞u m√£ t√†u ƒë·∫ßy ƒë·ªß ƒë·ªÉ t∆∞∆°ng th√≠ch
                    else:
                        # N·∫øu kh√¥ng match pattern, gi·ªØ nguy√™n
                        ma_tau_so = ma_tau_full
                        result['ma_tau_so'] = ma_tau_so
                        result['tinh'] = tinh
                
                # L∆∞u m√£ thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß ƒë·ªÉ x·ª≠ l√Ω sau
                result['ma_thiet_bi_full'] = ma_thiet_bi_full
                
                if ma_niem_phong and ma_niem_phong.lower() != 'kh√¥ng t√¨m th·∫•y':
                    niem_phong_counts[ma_niem_phong] += 1
                if ma_tau_so and ma_tau_so.lower() != 'kh√¥ng t√¨m th·∫•y':
                    tau_counts[ma_tau_so] += 1
                if ngay_chup and ngay_chup.lower() != 'kh√¥ng t√¨m th·∫•y':
                    ngay_chup_counts[ngay_chup] += 1
                if ma_thiet_bi_full and ma_thiet_bi_full.lower() != 'kh√¥ng t√¨m th·∫•y':
                    ma_thiet_bi_counts[ma_thiet_bi_full] += 1
                if tinh and tinh.lower() != 'kh√¥ng t√¨m th·∫•y':
                    tinh_counts[tinh] += 1
            
            # T√¨m gi√° tr·ªã ph·ªï bi·∫øn nh·∫•t
            final_niem_phong = niem_phong_counts.most_common(1)[0][0] if niem_phong_counts else ""
            final_tau = tau_counts.most_common(1)[0][0] if tau_counts else ""
            final_ngay_chup = ngay_chup_counts.most_common(1)[0][0] if ngay_chup_counts else ""
            final_thiet_bi_full = ma_thiet_bi_counts.most_common(1)[0][0] if ma_thiet_bi_counts else ""
            final_tinh = tinh_counts.most_common(1)[0][0] if tinh_counts else ""
            
            # X·ª≠ l√Ω m√£ thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß ƒë·ªÉ l·∫•y s·ªë cu·ªëi c√πng
            final_thiet_bi = "Kh√¥ng t√¨m th·∫•y"
            if final_thiet_bi_full and final_thiet_bi_full.lower() != 'kh√¥ng t√¨m th·∫•y':
                # T√°ch s·ªë t·ª´ m√£ thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß (ch·ªâ ch·∫•p nh·∫≠n BTK + s·ªë)
                import re
                thiet_bi_pattern = r'BTK(\d{6})'
                thiet_bi_match = re.search(thiet_bi_pattern, final_thiet_bi_full.upper())
                
                if thiet_bi_match:
                    final_thiet_bi = thiet_bi_match.group(1)  # L·∫•y 6 s·ªë
                else:
                    # N·∫øu kh√¥ng match pattern BTK, ki·ªÉm tra xem c√≥ ph·∫£i m√£ kh√°c kh√¥ng
                    if not final_thiet_bi_full.upper().startswith('BTK'):
                        print(f"‚ö†Ô∏è  M√£ thi·∫øt b·ªã '{final_thiet_bi_full}' kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng BTK - b·ªè qua")
                        final_thiet_bi = "Kh√¥ng t√¨m th·∫•y"
                    else:
                        # N·∫øu b·∫Øt ƒë·∫ßu b·∫±ng BTK nh∆∞ng kh√¥ng ƒë√∫ng format, th·ª≠ l·∫•y s·ªë
                        numbers = re.findall(r'\d+', final_thiet_bi_full)
                        if numbers:
                            # L·∫•y s·ªë cu·ªëi c√πng v√† ƒë·∫£m b·∫£o c√≥ 6 ch·ªØ s·ªë
                            last_number = numbers[-1]
                            if len(last_number) >= 6:
                                final_thiet_bi = last_number[-6:]  # L·∫•y 6 s·ªë cu·ªëi
                            else:
                                final_thiet_bi = last_number.zfill(6)  # Th√™m s·ªë 0 ·ªü ƒë·∫ßu
            
            # Export chi ti·∫øt k·∫øt qu·∫£ t·ª´ng ·∫£nh ra console
            export_detailed_results_to_console(all_results)
            
            # C·∫≠p nh·∫≠t giao di·ªán
            window.after(0, lambda: update_ui_with_ai_results(
                final_niem_phong, final_tau, final_ngay_chup, final_thiet_bi, final_tinh,
                len(all_results), error_count, final_thiet_bi_full
            ))
            
        except Exception as e:
            window.after(0, lambda: show_ai_error(str(e)))
    
    # Ch·∫°y ph√¢n t√≠ch trong thread ri√™ng
    threading.Thread(target=analyze_thread, daemon=True).start()

def update_ui_with_ai_results(ma_niem_phong, ma_tau_so, ngay_chup, ma_thiet_bi, tinh, total_images, error_count, ma_thiet_bi_full=""):
    """C·∫≠p nh·∫≠t giao di·ªán v·ªõi k·∫øt qu·∫£ AI"""
    # T·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin
    if ma_niem_phong:
        seal_code_num.delete(0, tk.END)
        seal_code_num.insert(0, ma_niem_phong)
    
    if ma_tau_so:
        tau_num.delete(0, tk.END)
        tau_num.insert(0, ma_tau_so)
    
    if ma_thiet_bi:
        device_code_num.delete(0, tk.END)
        device_code_num.insert(0, ma_thiet_bi)
    
    if tinh:
        # T√¨m t·ªânh trong danh s√°ch v√† t·ª± ƒë·ªông ch·ªçn
        found = False
        for key, value in tinh_thanh_vt.items():
            if value == tinh or key == tinh:
                combobox_tinh.set(key)
                found = True
                break
        
        # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m ki·∫øm g·∫ßn ƒë√∫ng
        if not found:
            for key, value in tinh_thanh_vt.items():
                if tinh.lower() in key.lower() or tinh.lower() in value.lower():
                    combobox_tinh.set(key)
                    found = True
                    break
    
    if ngay_chup and len(ngay_chup) == 6:
        try:
            # Chuy·ªÉn ƒë·ªïi DDMMYY th√†nh datetime object
            day = int(ngay_chup[:2])
            month = int(ngay_chup[2:4])
            year = 2000 + int(ngay_chup[4:6])
            from datetime import datetime
            cal.set_date(datetime(year, month, day))
        except:
            pass
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    success_count = total_images - error_count
    result_text = f"‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t! {success_count}/{total_images} ·∫£nh th√†nh c√¥ng"
    if error_count > 0:
        result_text += f" ({error_count} l·ªói)"
    
    # Th√™m th√¥ng tin t·ªânh ƒë∆∞·ª£c nh·∫≠n di·ªán
    if tinh:
        result_text += f"\nüìç T·ªânh: {tinh}"
        # Debug info cho console
        print(f"üîç Debug - T·ªânh ƒë∆∞·ª£c nh·∫≠n di·ªán: '{tinh}'")
        if tinh != "Kh√¥ng t√¨m th·∫•y":
            print(f"‚úÖ T·ªânh ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông ch·ªçn trong combobox")
        else:
            print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ t√¨m th·∫•y t·ªânh t∆∞∆°ng ·ª©ng")
    
    label_result.config(text=result_text)
    
    # Export k·∫øt qu·∫£ ra console
    export_results_to_console(ma_niem_phong, ma_tau_so, ngay_chup, ma_thiet_bi, tinh, total_images, error_count, ma_thiet_bi_full)
    
    # B·∫≠t l·∫°i n√∫t
    button_analyze.config(state="normal")

def export_detailed_results_to_console(all_results):
    """Export chi ti·∫øt k·∫øt qu·∫£ t·ª´ng ·∫£nh ra console"""
    print("\n" + "="*80)
    print("üì∏ CHI TI·∫æT K·∫æT QU·∫¢ T·ª™NG ·∫¢NH")
    print("="*80)
    
    for i, result in enumerate(all_results, 1):
        print(f"\nüñºÔ∏è  ·∫¢nh {i}: {result.get('file_name', 'Unknown')}")
        print("-" * 50)
        
        if 'error' in result and result['error']:
            print(f"‚ùå L·ªói: {result['error']}")
            if 'raw_response' in result:
                print(f"üìù Response g·ªëc: {result['raw_response'][:100]}...")
        else:
            print(f"  üîí M√£ ni√™m phong: {result.get('ma_niem_phong', 'Kh√¥ng t√¨m th·∫•y')}")
            print(f"  üö¢ S·ªë t√†u: {result.get('ma_tau_so', 'Kh√¥ng t√¨m th·∫•y')}")
            print(f"  üìÖ Ng√†y ch·ª•p: {result.get('ngay_chup', 'Kh√¥ng t√¨m th·∫•y')}")
            print(f"  üîß M√£ thi·∫øt b·ªã: {result.get('ma_thiet_bi', 'Kh√¥ng t√¨m th·∫•y')}")
            
            # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ m√£ thi·∫øt b·ªã
            ma_thiet_bi_full = result.get('ma_thiet_bi_full', '')
            if ma_thiet_bi_full and ma_thiet_bi_full != 'Kh√¥ng t√¨m th·∫•y':
                print(f"     üîß M√£ thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß t·ª´ AI: '{ma_thiet_bi_full}'")
                if ma_thiet_bi_full.upper().startswith('BTK'):
                    print(f"     ‚úÖ M√£ thi·∫øt b·ªã h·ª£p l·ªá (b·∫Øt ƒë·∫ßu b·∫±ng BTK)")
                else:
                    print(f"     ‚ùå M√£ thi·∫øt b·ªã kh√¥ng h·ª£p l·ªá (kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng BTK)")
                print(f"     üìù M√£ thi·∫øt b·ªã s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω t√°ch s·ªë ·ªü cu·ªëi c√πng")
            
            # Chi ti·∫øt v·ªÅ vi·ªác suy ra t·ªânh
            tinh = result.get('tinh', 'Kh√¥ng t√¨m th·∫•y')
            print(f"  üìç T·ªânh: {tinh}")
            
            # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ m√£ t√†u v√† t·ªânh
            if 'raw_response' in result:
                raw_response = result['raw_response']
                print(f"     üìù Raw response t·ª´ AI:")
                print(f"        {raw_response[:200]}...")
                
                # L·∫•y th√¥ng tin ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                ma_tau_full = result.get('ma_tau_full', '')
                tinh_code = result.get('tinh_code', '')
                tinh_code_original = result.get('tinh_code_original', '')
                ma_tau_so = result.get('ma_tau_so', '')
                
                print(f"     üö¢ M√£ t√†u ƒë·∫ßy ƒë·ªß t·ª´ AI: '{ma_tau_full}'")
                
                if tinh_code and ma_tau_so:
                    print(f"     üîç Ph√¢n t√≠ch m√£ t√†u '{ma_tau_full}':")
                    print(f"        üìç Ch·ªØ c√°i t·ªânh (g·ªëc): '{tinh_code_original}'")
                    print(f"        üìç Ch·ªØ c√°i t·ªânh (uppercase): '{tinh_code}'")
                    print(f"        üî¢ S·ªë t√†u: '{ma_tau_so}'")
                    print(f"        üó∫Ô∏è  Suy ra t·ªânh: '{tinh}'")
                    
                    # Ki·ªÉm tra mapping
                    if tinh != "Kh√¥ng t√¨m th·∫•y":
                        print(f"        ‚úÖ Mapping th√†nh c√¥ng: {tinh_code} ‚Üí {tinh}")
                        print(f"        üéØ Ch∆∞∆°ng tr√¨nh ƒë√£ d√πng ch·ªØ c√°i '{tinh_code}' ƒë·ªÉ suy ra t·ªânh '{tinh}'")
                    else:
                        print(f"        ‚ùå Kh√¥ng t√¨m th·∫•y mapping cho m√£: {tinh_code}")
                        print(f"        üîç Danh s√°ch m√£ t·ªânh c√≥ s·∫µn:")
                        tinh_mapping = create_tinh_mapping()
                        for code, name in list(tinh_mapping.items())[:5]:  # Hi·ªÉn th·ªã 5 m√£ ƒë·∫ßu
                            print(f"           {code} ‚Üí {name}")
                        if len(tinh_mapping) > 5:
                            print(f"           ... v√† {len(tinh_mapping) - 5} m√£ kh√°c")
                else:
                    print(f"     ‚ö†Ô∏è  M√£ t√†u '{ma_tau_full}' kh√¥ng ƒë√∫ng format (c·∫ßn: XX 12345)")
                    print(f"     ü§î Kh√¥ng th·ªÉ suy ra t·ªânh t·ª´ m√£ t√†u n√†y")
            else:
                print(f"     ‚ö†Ô∏è  Kh√¥ng c√≥ raw_response ƒë·ªÉ ph√¢n t√≠ch")
    
    print("\n" + "="*80)

def export_results_to_console(ma_niem_phong, ma_tau_so, ngay_chup, ma_thiet_bi, tinh, total_images, error_count, ma_thiet_bi_full=""):
    """Export k·∫øt qu·∫£ t·ªïng h·ª£p ra console"""
    print("\n" + "="*60)
    print("ü§ñ K·∫æT QU·∫¢ T·ªîNG H·ª¢P AI")
    print("="*60)
    print(f"üìä T·ªïng s·ªë ·∫£nh: {total_images}")
    print(f"‚úÖ Th√†nh c√¥ng: {total_images - error_count}")
    if error_count > 0:
        print(f"‚ùå L·ªói: {error_count}")
    print("-"*60)
    print("üìã TH√îNG TIN ƒê∆Ø·ª¢C TR√çCH XU·∫§T (T·∫ßn su·∫•t cao nh·∫•t):")
    print(f"  üîí M√£ ni√™m phong: {ma_niem_phong if ma_niem_phong else 'Kh√¥ng t√¨m th·∫•y'}")
    print(f"  üö¢ S·ªë t√†u: {ma_tau_so if ma_tau_so else 'Kh√¥ng t√¨m th·∫•y'}")
    print(f"  üìÖ Ng√†y ch·ª•p: {ngay_chup if ngay_chup else 'Kh√¥ng t√¨m th·∫•y'}")
    print(f"  üîß M√£ thi·∫øt b·ªã: {ma_thiet_bi if ma_thiet_bi else 'Kh√¥ng t√¨m th·∫•y'}")
    print(f"  üìç T·ªânh: {tinh if tinh else 'Kh√¥ng t√¨m th·∫•y'}")
    
    # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ m√£ thi·∫øt b·ªã
    if ma_thiet_bi_full and ma_thiet_bi_full != 'Kh√¥ng t√¨m th·∫•y':
        print("-"*60)
        print("üîß TH√îNG TIN M√É THI·∫æT B·ªä:")
        print(f"  üì± M√£ thi·∫øt b·ªã ƒë·∫ßy ƒë·ªß: {ma_thiet_bi_full}")
        print(f"  üî¢ S·ªë thi·∫øt b·ªã (ƒë√£ t√°ch): {ma_thiet_bi}")
        print(f"  ‚úÖ X·ª≠ l√Ω: {ma_thiet_bi_full} ‚Üí {ma_thiet_bi}")
    
    # Th√™m th√¥ng tin v·ªÅ mapping t·ªânh
    if tinh and tinh != "Kh√¥ng t√¨m th·∫•y":
        print("-"*60)
        print("üó∫Ô∏è  TH√îNG TIN MAPPING T·ªàNH:")
        # T√¨m m√£ t·ªânh t∆∞∆°ng ·ª©ng
        found_mapping = False
        tinh_mapping = create_tinh_mapping()
        for code, name in tinh_mapping.items():
            if name == tinh:
                print(f"  üè∑Ô∏è  M√£ t·ªânh: {code}")
                print(f"  üìç T√™n t·ªânh: {name}")
                print(f"  ‚úÖ Mapping: {code} ‚Üí {name}")
                found_mapping = True
                break
        
        if not found_mapping:
            print(f"  ‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y m√£ t·ªânh cho: {tinh}")
            print(f"  üîç C√≥ th·ªÉ AI ƒë√£ nh·∫≠n di·ªán tr·ª±c ti·∫øp t√™n t·ªânh t·ª´ ·∫£nh")
            print(f"  üìã Danh s√°ch m√£ t·ªânh c√≥ s·∫µn:")
            for code, name in list(tinh_mapping.items())[:10]:  # Hi·ªÉn th·ªã 10 m√£ ƒë·∫ßu
                print(f"     {code} ‚Üí {name}")
            if len(tinh_mapping) > 10:
                print(f"     ... v√† {len(tinh_mapping) - 10} m√£ kh√°c")
    else:
        print("-"*60)
        print("üó∫Ô∏è  TH√îNG TIN MAPPING T·ªàNH:")
        print(f"  ‚ùå AI kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c t·ªânh t·ª´ ·∫£nh")
        print(f"  üí° C√≥ th·ªÉ do:")
        print(f"     - Kh√¥ng c√≥ m√£ t√†u r√µ r√†ng trong ·∫£nh")
        print(f"     - M√£ t√†u kh√¥ng kh·ªõp v·ªõi danh s√°ch mapping")
        print(f"     - Ch·∫•t l∆∞·ª£ng ·∫£nh kh√¥ng ƒë·ªß ƒë·ªÉ nh·∫≠n di·ªán")
    
    print("="*60)
    print("üí° Th√¥ng tin ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn v√†o form!")
    print("="*60 + "\n")

def show_ai_error(error_msg):
    """Hi·ªÉn th·ªã l·ªói AI"""
    label_result.config(text=f"‚ùå L·ªói AI: {error_msg}")
    button_analyze.config(state="normal")

def open_config_manager():
    """M·ªü ch∆∞∆°ng tr√¨nh config manager"""
    try:
        # Ki·ªÉm tra xem file config_manager.exe c√≥ t·ªìn t·∫°i kh√¥ng
        if os.path.exists("config_manager.exe"):
            # M·ªü config_manager.exe
            subprocess.Popen(["config_manager.exe"])
            print("üîß ƒê√£ m·ªü Config Manager")
        elif os.path.exists("config_manager.py"):
            # Fallback: m·ªü config_manager.py b·∫±ng Python
            subprocess.Popen([sys.executable, "config_manager.py"])
            print("üîß ƒê√£ m·ªü Config Manager (Python)")
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file config_manager.exe ho·∫∑c config_manager.py!")
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü Config Manager: {e}")



def create_folder():
    tinh = combobox_tinh.get()
    daily = combobox_daily.get()
    so_tau = tau_num.get()
    ma_thiet_bi = device_code_num.get()
    ma_niem_phong = seal_code_num.get()
    ngay = cal.get_date().strftime("%d%m%y")

    # Ki·ªÉm tra m√£ ni√™m phong trong file ni√™m_phong.txt
    with open("niem_phong.txt", "r", encoding="utf-8") as f:
        valid_seal_codes = {line.strip() for line in f}
    if ma_niem_phong not in valid_seal_codes:
        messagebox.showerror("L·ªói", "M√£ ni√™m phong kh√¥ng h·ª£p l·ªá!")
        return

    # L·∫•y ƒë∆∞·ªùng d·∫´n output
    output_path = output_folder_entry.get()

    # Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n output
    if not output_path:
        messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn folder output!")
        return

    # Ki·ªÉm tra m√£ thi·∫øt b·ªã
    if not ma_thiet_bi.isdigit() or len(ma_thiet_bi) != 6:
        messagebox.showerror("L·ªói", "M√£ thi·∫øt b·ªã ph·∫£i l√† ƒë√∫ng 6 ch·ªØ s·ªë!")
        return

    # R√∫t g·ªçn t√™n t·ªânh v√† ƒë·∫°i l√Ω
    tinh_rut_gon = tinh_thanh_vt.get(tinh, tinh)
    dai_ly_rut_gon = dai_ly_vt.get(daily, daily)
    if(cong_no_var.get()=="Yes"):
        cong_no_suffix = "1"
    elif(cong_no_var.get()=="No"):
        cong_no_suffix = "0"
    else:
        cong_no_suffix = "3"

    # T·∫°o t√™n th∆∞ m·ª•c
    folder_name = f"{tinh_rut_gon}.{dai_ly_rut_gon}.{so_tau}.{ma_thiet_bi}.{ma_niem_phong}.{ngay}.{cong_no_suffix}"
    full_path = os.path.join(output_path, folder_name)

    try:
        os.makedirs(full_path)
        
        # Move ·∫£nh t·ª´ folder input sang folder output
        input_path = input_folder_entry.get()
        if input_path and os.path.exists(input_path):
            moved_count = 0
            for filename in os.listdir(input_path):
                if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                    source_path = os.path.join(input_path, filename)
                    destination_path = os.path.join(full_path, filename)
                    shutil.move(source_path, destination_path)
                    moved_count += 1
            
            if moved_count > 0:
                label_result.config(text=f"‚úÖ T·∫°o folder th√†nh c√¥ng v√† ƒë√£ di chuy·ªÉn {moved_count} ·∫£nh!")
            else:
                label_result.config(text="‚úÖ T·∫°o folder th√†nh c√¥ng! (Kh√¥ng c√≥ ·∫£nh ƒë·ªÉ di chuy·ªÉn)")
        else:
            label_result.config(text="‚úÖ T·∫°o folder th√†nh c√¥ng! (Kh√¥ng c√≥ folder input)")
        
        # X√≥a m√£ ni√™m phong ƒë√£ d√πng trong file ni√™m_phong.txt
        valid_seal_codes.remove(ma_niem_phong)
        with open("niem_phong.txt", "w", encoding="utf-8") as f:
            for code in valid_seal_codes:
                f.write(code + "\n")

        # C·∫≠p nh·∫≠t hi·ªÉn th·ªã s·ªë m√£ ni√™m phong c√≤n l·∫°i
        update_remaining_seal_codes()
        
    except Exception as e:
        label_result.config(text=f"‚ùå L·ªói: {e}")

    # Clear input fields after creating the folder
    combobox_tinh.set("")
    combobox_daily.set("")
    tau_num.delete(0, tk.END)
    device_code_num.delete(0, tk.END)
    seal_code_num.delete(0, tk.END)

def update_remaining_seal_codes():
    try:
        with open("niem_phong.txt", "r", encoding="utf-8") as f:
            remaining_codes = len(f.readlines())
        label_remaining_seal_codes.config(text=f"M√£ ni√™m phong c√≤n l·∫°i: {remaining_codes}")
    except FileNotFoundError:
        label_remaining_seal_codes.config(text="Kh√¥ng t√¨m th·∫•y file ni√™m phong.")


def update_image_display():
    global image_labels
    for label in image_labels:
        label.destroy()
    image_labels = []

def load_mappings(tinh_config_file, dai_ly_config_file):
    tinh_mapping = {}
    dai_ly_mapping = {}

    with open(tinh_config_file, "r", encoding="utf-8") as f:
        for line in f:
            value, key = line.strip().split(":")
            tinh_mapping[key.strip()] = value.strip()

    with open(dai_ly_config_file, "r", encoding="utf-8") as f:
        for line in f:
            key, value = line.strip().split(":")
            dai_ly_mapping[key.strip()] = value.strip()

    return tinh_mapping, dai_ly_mapping

def load_data(config_file):
    data = {}

    try:
        with open(config_file, "r", encoding="utf-8") as f:
            for line in f:
                parts = line.strip().split(":")
                if len(parts) == 2:
                    data[parts[0].strip()] = parts[1].strip()
    except FileNotFoundError:
        messagebox.showwarning("C·∫£nh b√°o", f"Kh√¥ng t√¨m th·∫•y t·ªáp tin c·∫•u h√¨nh: {config_file}")

    return data

# --- Giao di·ªán ng∆∞·ªùi d√πng ---
window = tk.Tk()
window.title("T·∫°o folder")
window.iconbitmap("iconZ.ico")
cong_no_var = tk.StringVar(value="Unknow")

tinh_thanh_vt, dai_ly_vt = load_mappings("ma_tinh_config.txt", "dai_ly_config.txt")

# Load danh s√°ch t·ªânh th√†nh t·ª´ file ma_tinh_config.txt
tinh_thanh_vt = load_data("ma_tinh_config.txt")
tinh_thanh_vn = list(tinh_thanh_vt.keys())

# Load danh s√°ch ƒë·∫°i l√Ω t·ª´ file danh_sach_dai_ly.txt
dai_ly_vt = load_data("dai_ly_config.txt")
danh_sach_dai_ly = list(dai_ly_vt.keys())


# Frame ch·ª©a c√°c th√†nh ph·∫ßn nh·∫≠p li·ªáu
input_frame = tk.LabelFrame(window, text="Th√¥ng tin")
input_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

# Frame ch·ª©a ƒë∆∞·ªùng d·∫´n
path_frame = tk.LabelFrame(window, text="ƒê∆∞·ªùng d·∫´n")
path_frame.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")

# C√°c Label v√† Entry trong Frame
label_tinh = tk.Label(input_frame, text="T·ªânh:")
label_tinh.grid(row=0, column=0, padx=5, pady=5, sticky="w")
combobox_tinh = AutocompleteCombobox(input_frame, completevalues=tinh_thanh_vn)
combobox_tinh.grid(row=0, column=1, padx=5, pady=5, sticky="ew")

label_daily = tk.Label(input_frame, text="ƒê·∫°i l√Ω:")
label_daily.grid(row=1, column=0, padx=5, pady=5, sticky="w")
combobox_daily = AutocompleteCombobox(input_frame, completevalues=danh_sach_dai_ly, width=35)
combobox_daily.grid(row=1, column=1, padx=5, pady=5, sticky="ew")

label_sotau = tk.Label(input_frame, text="S·ªë t√†u:")
label_sotau.grid(row=2, column=0, padx=5, pady=5, sticky="w")
tau_num = tk.Entry(input_frame, width=10)
tau_num.grid(row=2, column=1, padx=5, pady=5, sticky="ew")

# Validation cho s·ªë t√†u - ch·ªâ cho ph√©p s·ªë
def validate_tau_number(event):
    value = tau_num.get()
    # Ch·ªâ gi·ªØ l·∫°i c√°c k√Ω t·ª± s·ªë
    filtered_value = ''.join(filter(str.isdigit, value))
    
    if filtered_value != value:
        tau_num.delete(0, tk.END)
        tau_num.insert(0, filtered_value)

tau_num.bind('<KeyRelease>', validate_tau_number)

label_device_code = tk.Label(input_frame, text="M√£ thi·∫øt b·ªã:")
label_device_code.grid(row=3, column=0, padx=5, pady=5, sticky="w")
device_code_num = tk.Entry(input_frame, width=10)
device_code_num.grid(row=3, column=1, padx=5, pady=5, sticky="ew")

# Validation cho m√£ thi·∫øt b·ªã - ch·ªâ cho ph√©p s·ªë v√† t·ªëi ƒëa 6 k√Ω t·ª±
def validate_device_code(event):
    value = device_code_num.get()
    # Ch·ªâ gi·ªØ l·∫°i c√°c k√Ω t·ª± s·ªë
    filtered_value = ''.join(filter(str.isdigit, value))
    # Gi·ªõi h·∫°n t·ªëi ƒëa 6 k√Ω t·ª±
    if len(filtered_value) > 6:
        filtered_value = filtered_value[:6]
    
    if filtered_value != value:
        device_code_num.delete(0, tk.END)
        device_code_num.insert(0, filtered_value)

device_code_num.bind('<KeyRelease>', validate_device_code)

label_seal_code = tk.Label(input_frame, text="M√£ ni√™m phong:")
label_seal_code.grid(row=4, column=0, padx=5, pady=5, sticky="w")
seal_code_num = tk.Entry(input_frame, width=10)
seal_code_num.grid(row=4, column=1, padx=5, pady=5, sticky="ew")

# Validation cho m√£ ni√™m phong - format: 1 ch·ªØ c√°i + 6 s·ªë
def validate_seal_code(event):
    value = seal_code_num.get().upper()
    # Ch·ªâ gi·ªØ l·∫°i ch·ªØ c√°i v√† s·ªë
    filtered_value = ''.join(c for c in value if c.isalnum())
    # Gi·ªõi h·∫°n t·ªëi ƒëa 7 k√Ω t·ª±
    if len(filtered_value) > 7:
        filtered_value = filtered_value[:7]
    
    if filtered_value != value:
        seal_code_num.delete(0, tk.END)
        seal_code_num.insert(0, filtered_value)

seal_code_num.bind('<KeyRelease>', validate_seal_code)

label_days = tk.Label(input_frame, text="Ng√†y:")
label_days.grid(row=5, column=0, padx=5, pady=5, sticky="w")
cal = DateEntry(input_frame, width=12, bg="darkblue", fg="white")
cal.grid(row=5, column=1, padx=5, pady=5, sticky="ew")

# Th√™m ph·∫ßn C√¥ng n·ª£
label_cong_no = tk.Label(input_frame, text="C√¥ng n·ª£:")
label_cong_no.grid(row=6, column=0, padx=5, pady=5, sticky="w")
cong_no_options = ["Unknow", "Yes", "No"]
for i, option in enumerate(cong_no_options):
    tk.Radiobutton(input_frame, text=option, variable=cong_no_var, value=option).grid(row=6, column=i+1, sticky="w")



# Folder Input
label_input_folder = tk.Label(path_frame, text="Folder Input:")
label_input_folder.grid(row=0, column=0, padx=5, pady=5, sticky="w")

input_folder_frame = tk.Frame(path_frame)
input_folder_frame.grid(row=0, column=1, padx=5, pady=5, sticky="ew")

input_folder_entry = tk.Entry(input_folder_frame, width=40)
input_folder_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)

# T·ª± ƒë·ªông l∆∞u khi thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n input
def on_input_folder_change(event):
    path = input_folder_entry.get().strip()
    if path and os.path.isdir(path):
        save_input_folder_path(path)

input_folder_entry.bind('<FocusOut>', on_input_folder_change)

button_browse_input = tk.Button(input_folder_frame, text="Ch·ªçn", command=browse_input_folder)
button_browse_input.pack(side=tk.RIGHT, padx=(5, 0))

# Folder Output
label_output_folder = tk.Label(path_frame, text="Folder Output:")
label_output_folder.grid(row=1, column=0, padx=5, pady=5, sticky="w")

output_folder_frame = tk.Frame(path_frame)
output_folder_frame.grid(row=1, column=1, padx=5, pady=5, sticky="ew")

output_folder_entry = tk.Entry(output_folder_frame, width=40)
output_folder_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)

# T·ª± ƒë·ªông l∆∞u khi thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n output
def on_output_folder_change(event):
    path = output_folder_entry.get().strip()
    if path and os.path.isdir(path):
        save_output_folder_path(path)

output_folder_entry.bind('<FocusOut>', on_output_folder_change)

button_browse_output = tk.Button(output_folder_frame, text="Ch·ªçn", command=browse_output_folder)
button_browse_output.pack(side=tk.RIGHT, padx=(5, 0))

# C·∫•u h√¨nh grid weights
path_frame.columnconfigure(1, weight=1)

# Frame ch·ª©a c√°c n√∫t ƒëi·ªÅu khi·ªÉn
button_frame = tk.Frame(path_frame)
button_frame.grid(row=2, column=0, columnspan=2, padx=5, pady=10, sticky="ew")

# N√∫t "X·ª≠ l√Ω AI"
button_analyze = tk.Button(button_frame, text="ü§ñ X·ª≠ l√Ω AI", command=analyze_images_with_ai, 
                          bg="#4CAF50", fg="white", font=("Arial", 10, "bold"),
                          state="normal" if AI_AVAILABLE else "disabled")
button_analyze.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))

# N√∫t "T·∫°o folder"
button_convert = tk.Button(button_frame, text="T·∫°o folder", command=create_folder)
button_convert.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(5, 0))

# Label hi·ªÉn th·ªã tr·∫°ng th√°i AI
ai_status_text = "‚úÖ AI: S·∫µn s√†ng" if AI_AVAILABLE else "‚ùå AI: C·∫ßn c·∫•u h√¨nh API Key"
label_ai_status = tk.Label(path_frame, text=ai_status_text, 
                          fg="green" if AI_AVAILABLE else "red", font=("Arial", 9))
label_ai_status.grid(row=3, column=0, columnspan=2, padx=5, pady=2)

# N√∫t "C·∫•u h√¨nh" ·ªü g√≥c trong frame "Th√¥ng tin"
button_config = tk.Button(input_frame, text="‚öôÔ∏è", command=open_config_manager,
                         bg="#FF9800", fg="white", font=("Arial", 8),
                         width=2, height=1, relief="flat", bd=0)
button_config.place(in_=input_frame, relx=0.98, rely=0.02, anchor="ne")

# Th√™m label hi·ªÉn th·ªã s·ªë m√£ ni√™m phong c√≤n l·∫°i
label_remaining_seal_codes = tk.Label(input_frame, text="")
label_remaining_seal_codes.grid(row=7, column=0, columnspan=2, padx=5, pady=5)  # ƒê·∫∑t v·ªã tr√≠ ph√π h·ª£p



# C·∫≠p nh·∫≠t ban ƒë·∫ßu khi ch∆∞∆°ng tr√¨nh ch·∫°y
update_remaining_seal_codes()

# Load ƒë∆∞·ªùng d·∫´n ƒë√£ l∆∞u
input_folder_path = load_input_folder_path()
if input_folder_path:
    input_folder_entry.insert(0, input_folder_path)

output_folder_path = load_output_folder_path()
if output_folder_path:
    output_folder_entry.insert(0, output_folder_path)

# Label k·∫øt qu·∫£
label_result = tk.Label(window, text="")
label_result.grid(row=3, column=0, padx=10, pady=(0, 10), sticky="ew")

# C·∫•u h√¨nh grid weights
window.columnconfigure(0, weight=1)
window.columnconfigure(1, weight=1)
window.rowconfigure(0, weight=1)

window.mainloop()
